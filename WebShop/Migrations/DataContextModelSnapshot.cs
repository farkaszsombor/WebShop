// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebShop.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cvv")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Holder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cvv = 0,
                            ExpirationDate = new DateTime(11, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Holder = "Kiscsillag",
                            Number = "hahahaha"
                        },
                        new
                        {
                            Id = 2,
                            Cvv = 0,
                            ExpirationDate = new DateTime(6, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Holder = "Pikans",
                            Number = "hahahaha"
                        });
                });

            modelBuilder.Entity("Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubTotal = 123.0
                        },
                        new
                        {
                            Id = 2,
                            SubTotal = 123.0
                        });
                });

            modelBuilder.Entity("Entities.CartProduct", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CartId = 2,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "alma",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "alma",
                            ParentId = 1
                        });
                });

            modelBuilder.Entity("Entities.Geo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Geos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            County = "Bihor",
                            Locality = "Oradea"
                        },
                        new
                        {
                            Id = 2,
                            County = "Harghita",
                            Locality = "Gheorgeni"
                        });
                });

            modelBuilder.Entity("Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alt = "asd",
                            FileName = "long",
                            Path = "bumm",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Alt = "asd",
                            FileName = "long",
                            Path = "bumm",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Entities.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KeywordProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Keyword");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KeyWord = "bicska",
                            KeywordProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            KeyWord = "bicskav2",
                            KeywordProductId = 2
                        });
                });

            modelBuilder.Entity("Entities.KeywordProduct", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("KeywordId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("KeywordProduct");

                    b.HasData(
                        new
                        {
                            KeywordId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            KeywordId = 1,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImportCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuyPrice = 12.0,
                            CategoryId = 1,
                            ImportCountryCode = "JPN",
                            LongDescription = "aaaaa",
                            Name = "Csavarhuzo",
                            OrderLink = "hosszu",
                            ParentId = 1,
                            ProductCode = "asd",
                            SalePrice = 10.0,
                            ShortDescription = "a",
                            Stock = 10,
                            Type = "kesztyu"
                        },
                        new
                        {
                            Id = 2,
                            BuyPrice = 12.0,
                            CategoryId = 2,
                            ImportCountryCode = "JPNA",
                            LongDescription = "aaaaa",
                            Name = "Csavarhuszo",
                            OrderLink = "hosszu",
                            ParentId = 2,
                            ProductCode = "assssd",
                            SalePrice = 10.0,
                            ShortDescription = "a",
                            Stock = 10,
                            Type = "kesztyu"
                        });
                });

            modelBuilder.Entity("Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            ReviewText = "blablA",
                            Stars = 3
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            ReviewText = "blasblA",
                            Stars = 3
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeoId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdersCount")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("GeoId")
                        .IsUnique();

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "WTF",
                            CardId = 1,
                            CartId = 1,
                            Email = "asd@asd.com",
                            FirstName = "Farkas",
                            GeoId = 1,
                            LastName = "Zsombor",
                            OrdersCount = 0,
                            PasswordHash = "ZSFSAFASFS",
                            PhoneNumber = "nincs",
                            ReviewId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "WTF",
                            CardId = 2,
                            CartId = 2,
                            Email = "asd@asd.com",
                            FirstName = "Rapa",
                            GeoId = 2,
                            LastName = "Erik",
                            OrdersCount = 0,
                            PasswordHash = "ZSFSAFASFS",
                            PhoneNumber = "nincs",
                            ReviewId = 2
                        });
                });

            modelBuilder.Entity("Entities.CartProduct", b =>
                {
                    b.HasOne("Entities.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.HasOne("Entities.Category", "Parent")
                        .WithOne()
                        .HasForeignKey("Entities.Category", "ParentId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Entities.Image", b =>
                {
                    b.HasOne("Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.KeywordProduct", b =>
                {
                    b.HasOne("Entities.Keyword", "Keyword")
                        .WithMany("KeywordProducts")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany("KeywordProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithOne("Product")
                        .HasForeignKey("Entities.Product", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Parent")
                        .WithOne()
                        .HasForeignKey("Entities.Product", "ParentId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Entities.Review", b =>
                {
                    b.HasOne("Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Card", "Card")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Geo", "Geo")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "GeoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Review", "Review")
                        .WithOne("User")
                        .HasForeignKey("Entities.User", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
